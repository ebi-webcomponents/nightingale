import { last, RangeCollection } from "../src/utils/utils";


const mockSortedArray = [0, 0, 2, 3, 3, 5, 7, 9, 10, 11, 11, 13, 16, 19, 23, 23, 24, 24, 24, 27, 30, 31, 31, 32, 33, 34, 34, 35, 36, 38, 39, 39, 41, 41, 41, 42, 46, 46, 47, 48, 48, 50, 52, 53, 55, 56, 58, 58, 58, 59, 61, 61, 63, 64, 65, 65, 67, 67, 70, 71, 72, 74, 74, 74, 75, 77, 78, 79, 80, 82, 82, 83, 84, 84, 85, 86, 87, 88, 88, 88, 89, 92, 92, 92, 93, 93, 93, 94, 95, 95, 96, 96, 96, 99, 99, 99, 102, 102, 103, 104, 105, 107, 107, 109, 110, 110, 111, 113, 114, 114, 114, 115, 115, 117, 117, 117, 119, 120, 121, 122, 122, 123, 126, 126, 128, 128, 129, 129, 130, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 146, 146, 147, 148, 148, 149, 151, 151, 151, 153, 153, 154, 156, 156, 157, 157, 157, 158, 158, 159, 159, 159, 162, 162, 164, 166, 167, 168, 169, 169, 169, 171, 172, 173, 174, 175, 175, 175, 178, 178, 178, 181, 181, 182, 183, 183, 184, 185, 185, 186, 186, 186, 187, 187, 188, 188, 190, 192, 192, 192, 193, 193, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 205, 206, 206, 207, 207, 210, 210, 211, 211, 211, 211, 211, 211, 215, 217, 219, 219, 221, 222, 222, 223, 223, 224, 227, 228, 228, 229, 229, 233, 233, 233, 233, 234, 235, 236, 237, 238, 238, 238, 240, 241, 243, 245, 246, 247, 249, 250, 250, 250, 252, 252, 256, 256, 257, 258, 259, 260, 260, 261, 265, 268, 270, 270, 270, 270, 273, 273, 274, 274, 275, 278, 279, 279, 280, 281, 282, 282, 282, 283, 283, 284, 284, 284, 285, 287, 290, 292, 295, 295, 298, 298, 301, 302, 303, 304, 305, 306, 308, 309, 309, 310, 311, 311, 315, 315, 315, 317, 317, 317, 318, 319, 322, 322, 325, 327, 327, 327, 328, 328, 328, 329, 330, 330, 331, 332, 332, 333, 334, 334, 334, 335, 337, 340, 343, 345, 347, 348, 348, 349, 351, 351, 352, 354, 355, 355, 355, 356, 357, 358, 358, 359, 360, 360, 360, 361, 362, 363, 364, 365, 367, 369, 369, 369, 370, 372, 374, 375, 376, 377, 378, 379, 380, 381, 381, 387, 388, 388, 388, 391, 393, 394, 395, 395, 395, 396, 396, 398, 398, 399, 400, 400, 402, 402, 403, 403, 404, 405, 406, 408, 408, 410, 410, 412, 414, 415, 418, 418, 418, 420, 421, 422, 422, 424, 424, 425, 425, 425, 426, 428, 428, 429, 429, 430, 430, 431, 431, 432, 434, 435, 436, 437, 439, 439, 439, 444, 444, 445, 447, 450, 453, 453, 453, 454, 458, 458, 459, 463, 463, 464, 467, 467, 467, 469, 471, 471, 471, 473, 476, 478, 480, 481, 483, 483, 484, 484, 486, 486, 487, 487, 489, 489, 491, 491, 491, 492, 493, 494, 495, 495, 496, 496, 499, 500, 500, 500, 502, 504, 505, 506, 506, 507, 509, 509, 510, 511, 512, 512, 513, 513, 515, 517, 517, 519, 520, 521, 521, 522, 522, 524, 525, 525, 525, 527, 527, 528, 529, 533, 533, 535, 536, 539, 539, 540, 540, 541, 541, 545, 545, 545, 549, 549, 551, 551, 553, 554, 554, 555, 557, 557, 558, 558, 558, 559, 560, 561, 562, 562, 563, 563, 564, 565, 566, 571, 572, 573, 573, 573, 575, 576, 577, 578, 578, 578, 581, 581, 582, 582, 585, 585, 586, 587, 587, 588, 588, 589, 590, 592, 593, 594, 595, 595, 597, 599, 599, 600, 600, 601, 603, 603, 607, 608, 609, 609, 611, 612, 615, 617, 620, 621, 623, 625, 626, 626, 627, 628, 629, 630, 631, 633, 633, 634, 635, 635, 636, 636, 636, 638, 640, 640, 641, 641, 641, 643, 644, 644, 647, 648, 648, 649, 650, 651, 652, 652, 653, 654, 654, 655, 656, 656, 658, 659, 660, 660, 661, 661, 662, 663, 665, 668, 668, 672, 674, 674, 675, 675, 678, 679, 680, 682, 683, 683, 683, 684, 685, 685, 686, 686, 687, 695, 699, 699, 700, 701, 702, 703, 705, 705, 706, 706, 706, 706, 706, 706, 707, 707, 708, 711, 711, 714, 714, 714, 714, 715, 716, 717, 720, 722, 724, 724, 726, 726, 727, 728, 728, 729, 731, 731, 731, 732, 733, 734, 735, 737, 738, 738, 739, 739, 741, 741, 743, 743, 746, 747, 747, 748, 749, 750, 751, 751, 753, 754, 754, 756, 756, 757, 758, 758, 759, 760, 760, 760, 762, 763, 763, 764, 764, 765, 765, 767, 768, 769, 769, 770, 772, 774, 774, 774, 774, 775, 775, 778, 778, 778, 778, 778, 779, 780, 780, 781, 781, 782, 782, 783, 783, 783, 783, 784, 784, 786, 789, 790, 791, 791, 792, 792, 793, 793, 794, 794, 797, 799, 799, 799, 799, 799, 800, 801, 802, 802, 803, 804, 809, 810, 810, 811, 812, 812, 812, 813, 814, 816, 817, 819, 819, 819, 820, 821, 821, 823, 823, 824, 825, 826, 826, 829, 830, 830, 831, 831, 832, 832, 834, 836, 836, 837, 838, 839, 840, 840, 843, 843, 844, 844, 846, 847, 850, 851, 852, 853, 854, 854, 855, 857, 857, 859, 860, 861, 861, 862, 863, 864, 865, 866, 869, 870, 871, 871, 871, 874, 874, 875, 875, 875, 877, 880, 880, 881, 881, 883, 883, 885, 887, 888, 888, 889, 890, 890, 891, 893, 895, 895, 896, 897, 899, 899, 900, 900, 900, 902, 902, 903, 904, 905, 906, 907, 908, 908, 909, 909, 910, 911, 911, 911, 913, 914, 914, 915, 916, 916, 920, 922, 923, 924, 924, 927, 927, 928, 928, 929, 930, 931, 933, 936, 937, 938, 941, 945, 945, 946, 947, 948, 948, 949, 949, 951, 954, 956, 956, 957, 959, 959, 961, 961, 966, 966, 966, 968, 969, 970, 970, 973, 973, 973, 973, 976, 979, 981, 982, 982, 983, 984, 986, 986, 988, 989, 989, 990, 991, 991, 991, 991, 991, 992, 993, 994, 998, 999];

const mockRanges: [number, number][] = [[31, 99], [5, 40], [8, 77], [35, 65], [10, 81], [7, 31], [16, 43], [36, 90], [40, 80], [14, 71], [7, 47], [5, 16], [53, 73], [27, 46], [16, 50], [15, 26], [63, 97], [52, 57], [26, 38], [43, 71], [26, 100], [75, 88], [19, 63], [2, 19], [17, 78], [8, 49], [6, 10], [15, 90], [1, 50], [7, 65], [16, 20], [72, 95], [23, 75], [32, 59], [47, 62], [2, 33], [13, 48], [27, 53], [16, 48], [17, 95], [15, 43], [33, 93], [66, 75], [33, 76], [2, 52], [55, 72], [33, 90], [63, 76], [67, 84], [89, 96], [39, 91], [30, 34], [83, 89], [41, 62], [82, 83], [30, 64], [56, 83], [65, 86], [8, 12], [6, 94], [55, 77], [24, 40], [11, 30], [9, 45], [38, 71], [14, 24], [50, 58], [21, 74], [75, 89], [65, 81], [11, 76], [13, 17], [27, 56], [19, 63], [72, 85], [44, 86], [80, 88], [18, 25], [60, 65], [18, 86], [69, 92], [35, 97], [6, 54], [3, 63], [24, 83], [7, 75], [47, 83], [31, 88], [9, 15], [63, 95], [32, 66], [26, 77], [39, 94], [35, 79], [51, 55], [35, 92], [21, 93], [30, 84], [36, 66], [17, 37], [8, 82], [24, 31], [35, 49], [10, 36], [64, 67], [16, 76], [22, 43], [63, 78], [12, 13], [3, 56], [29, 97], [29, 99], [23, 57], [12, 78], [35, 51], [24, 78], [22, 85], [25, 70], [17, 19], [6, 91], [2, 19], [21, 63], [79, 86], [79, 80], [27, 53], [41, 91], [25, 55], [64, 71], [40, 62], [24, 69], [31, 33], [14, 52], [34, 80], [1, 14], [65, 89], [17, 67], [72, 77], [84, 95], [66, 99], [20, 59], [33, 54], [32, 75], [26, 53], [33, 81], [21, 74], [17, 21], [16, 50], [56, 61], [72, 96], [27, 91], [11, 63], [21, 90], [18, 39], [31, 97], [31, 37], [8, 87], [18, 49], [34, 84], [10, 70], [60, 82], [55, 77], [6, 34], [71, 100], [30, 93], [55, 99], [43, 76], [15, 87], [10, 61], [66, 74], [14, 21], [39, 91], [74, 86], [18, 69], [13, 60], [64, 96], [3, 32], [23, 35], [44, 82], [21, 39], [14, 47], [69, 71], [16, 55], [23, 96], [56, 60], [46, 77], [93, 95], [32, 98], [47, 86], [31, 67], [39, 83], [29, 80], [17, 28], [7, 8], [9, 44], [2, 15], [61, 74], [5, 55], [12, 19], [51, 75], [0, 1], [18, 67], [46, 53], [37, 83], [43, 57], [19, 24], [45, 76], [12, 85], [3, 43], [31, 44], [50, 51], [58, 63], [22, 24], [23, 25], [0, 47], [28, 48], [11, 59], [37, 43], [12, 20], [13, 37], [42, 72], [76, 78], [65, 73], [62, 72], [0, 29], [66, 83], [24, 33], [12, 45], [73, 100], [0, 52], [58, 67], [31, 95], [82, 85], [30, 32], [18, 77], [24, 80], [0, 61], [21, 85], [6, 29], [17, 97], [46, 86], [15, 72], [30, 49], [65, 74], [0, 40], [52, 81], [16, 50], [31, 33], [21, 84], [27, 98], [3, 54], [30, 86], [54, 58], [35, 84], [3, 53], [22, 29], [54, 64], [50, 95], [56, 57], [9, 34], [2, 71], [30, 98], [3, 70], [62, 78], [36, 86], [1, 96], [16, 36], [23, 62], [55, 99], [23, 48], [25, 77], [11, 92], [31, 97], [69, 86], [23, 93], [19, 76], [21, 26], [47, 68], [76, 97], [41, 57], [11, 85], [0, 93], [27, 93], [38, 38], [1, 66], [7, 44], [25, 59], [4, 34], [68, 82], [77, 89], [44, 70], [18, 95], [59, 86], [29, 66], [7, 85], [57, 81], [16, 25], [1, 5], [5, 28], [53, 56], [89, 96], [47, 81], [6, 21], [58, 98], [42, 55], [46, 51], [66, 98], [42, 59], [22, 63], [4, 27], [14, 95], [71, 74], [25, 90], [47, 99], [31, 94], [56, 96], [22, 38], [16, 43], [40, 54], [66, 69], [49, 80], [4, 58], [12, 41], [82, 84], [75, 77], [1, 37], [5, 62], [59, 61], [66, 91], [15, 78], [62, 70], [22, 34], [33, 40], [28, 36], [38, 65], [44, 81], [51, 55], [0, 55], [11, 52], [29, 43], [7, 94], [53, 74], [24, 51], [29, 57], [12, 64], [1, 70], [28, 97], [57, 98], [9, 82], [12, 89], [7, 35], [61, 97], [73, 93], [77, 80], [20, 97], [47, 67], [84, 96], [8, 9], [36, 68], [71, 85], [11, 32], [28, 62], [27, 64], [14, 18], [28, 92], [5, 40], [15, 29], [10, 12], [50, 93], [76, 92], [36, 55], [54, 61], [1, 90], [41, 49], [76, 94], [16, 80], [45, 66], [76, 98], [65, 99], [38, 86], [2, 29], [11, 60], [48, 79], [44, 94], [86, 98], [72, 98], [36, 73], [58, 59], [77, 80], [74, 85], [13, 71], [6, 87], [15, 50], [46, 70], [0, 29], [34, 45], [3, 40], [20, 67], [1, 32], [6, 87], [4, 44], [22, 71], [49, 77], [8, 51], [68, 73], [35, 94], [48, 67], [41, 92], [34, 90], [59, 62], [60, 66], [14, 43], [14, 92], [62, 71], [57, 91], [48, 93], [37, 62], [93, 99], [28, 82], [31, 34], [36, 72], [1, 34], [38, 43], [15, 54], [90, 97], [7, 55], [93, 98], [21, 56], [61, 83], [32, 60], [18, 37], [10, 57], [14, 74], [54, 72], [23, 72], [82, 84], [2, 46], [26, 97], [12, 58], [2, 75], [31, 86], [27, 94], [79, 96], [35, 70], [11, 28], [8, 25], [51, 69], [53, 60], [16, 75], [40, 49], [61, 70], [10, 61], [3, 44], [1, 16], [56, 80], [0, 48], [52, 62], [31, 64], [42, 43], [39, 73], [14, 21], [65, 73], [33, 50], [18, 33], [55, 91], [25, 29], [41, 52], [60, 62], [78, 100], [12, 19], [42, 53], [2, 60], [78, 92], [56, 100], [39, 57], [48, 85], [59, 99], [63, 78], [87, 96], [38, 100], [33, 93], [78, 78], [37, 45], [33, 79], [7, 100], [61, 82], [11, 50], [48, 88], [43, 91], [10, 13], [8, 30], [35, 62], [30, 93], [34, 39], [16, 96], [66, 76], [28, 37], [61, 67], [16, 92], [30, 99], [51, 52]];
const rangeQueries = mockRanges.slice(20);


describe("nightingale-track-canvas tests", () => {
  test("last", () => {
    expect(last([])).toEqual(undefined);
    expect(last(mockSortedArray)).toEqual(999);
    expect(last([], v => v % 10 === 0)).toEqual(undefined);
    expect(last(mockSortedArray, v => v % 10 === 0)).toEqual(990);
  });

  test("RangeCollection", () => {
    const collection = new RangeCollection(mockRanges, { start: r => r[0], stop: r => r[1] });
    expect(collection.size()).toEqual(mockRanges.length);

    for (const query of rangeQueries) {
      const truth = overlappingItems_reference(mockRanges, ...query);
      const found = collection.overlappingItems(...query);
      expect(found).toEqual(truth);
    }
  });
});


function overlappingItems_reference(ranges: [number, number][], start: number, stop: number) {
  const compareFn = (p: [number, number], q: [number, number]) => p[0] - q[0] || q[1] - p[1];
  return ranges.filter(r => r[0] < stop && r[1] > start).sort(compareFn);
}
