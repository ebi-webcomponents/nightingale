import { firstEqIndex, firstGteqIndex } from "../src/utils/binary-search";


const mockSortedArray = [0, 0, 2, 3, 3, 5, 7, 9, 10, 11, 11, 13, 16, 19, 23, 23, 24, 24, 24, 27, 30, 31, 31, 32, 33, 34, 34, 35, 36, 38, 39, 39, 41, 41, 41, 42, 46, 46, 47, 48, 48, 50, 52, 53, 55, 56, 58, 58, 58, 59, 61, 61, 63, 64, 65, 65, 67, 67, 70, 71, 72, 74, 74, 74, 75, 77, 78, 79, 80, 82, 82, 83, 84, 84, 85, 86, 87, 88, 88, 88, 89, 92, 92, 92, 93, 93, 93, 94, 95, 95, 96, 96, 96, 99, 99, 99, 102, 102, 103, 104, 105, 107, 107, 109, 110, 110, 111, 113, 114, 114, 114, 115, 115, 117, 117, 117, 119, 120, 121, 122, 122, 123, 126, 126, 128, 128, 129, 129, 130, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 146, 146, 147, 148, 148, 149, 151, 151, 151, 153, 153, 154, 156, 156, 157, 157, 157, 158, 158, 159, 159, 159, 162, 162, 164, 166, 167, 168, 169, 169, 169, 171, 172, 173, 174, 175, 175, 175, 178, 178, 178, 181, 181, 182, 183, 183, 184, 185, 185, 186, 186, 186, 187, 187, 188, 188, 190, 192, 192, 192, 193, 193, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 205, 206, 206, 207, 207, 210, 210, 211, 211, 211, 211, 211, 211, 215, 217, 219, 219, 221, 222, 222, 223, 223, 224, 227, 228, 228, 229, 229, 233, 233, 233, 233, 234, 235, 236, 237, 238, 238, 238, 240, 241, 243, 245, 246, 247, 249, 250, 250, 250, 252, 252, 256, 256, 257, 258, 259, 260, 260, 261, 265, 268, 270, 270, 270, 270, 273, 273, 274, 274, 275, 278, 279, 279, 280, 281, 282, 282, 282, 283, 283, 284, 284, 284, 285, 287, 290, 292, 295, 295, 298, 298, 301, 302, 303, 304, 305, 306, 308, 309, 309, 310, 311, 311, 315, 315, 315, 317, 317, 317, 318, 319, 322, 322, 325, 327, 327, 327, 328, 328, 328, 329, 330, 330, 331, 332, 332, 333, 334, 334, 334, 335, 337, 340, 343, 345, 347, 348, 348, 349, 351, 351, 352, 354, 355, 355, 355, 356, 357, 358, 358, 359, 360, 360, 360, 361, 362, 363, 364, 365, 367, 369, 369, 369, 370, 372, 374, 375, 376, 377, 378, 379, 380, 381, 381, 387, 388, 388, 388, 391, 393, 394, 395, 395, 395, 396, 396, 398, 398, 399, 400, 400, 402, 402, 403, 403, 404, 405, 406, 408, 408, 410, 410, 412, 414, 415, 418, 418, 418, 420, 421, 422, 422, 424, 424, 425, 425, 425, 426, 428, 428, 429, 429, 430, 430, 431, 431, 432, 434, 435, 436, 437, 439, 439, 439, 444, 444, 445, 447, 450, 453, 453, 453, 454, 458, 458, 459, 463, 463, 464, 467, 467, 467, 469, 471, 471, 471, 473, 476, 478, 480, 481, 483, 483, 484, 484, 486, 486, 487, 487, 489, 489, 491, 491, 491, 492, 493, 494, 495, 495, 496, 496, 499, 500, 500, 500, 502, 504, 505, 506, 506, 507, 509, 509, 510, 511, 512, 512, 513, 513, 515, 517, 517, 519, 520, 521, 521, 522, 522, 524, 525, 525, 525, 527, 527, 528, 529, 533, 533, 535, 536, 539, 539, 540, 540, 541, 541, 545, 545, 545, 549, 549, 551, 551, 553, 554, 554, 555, 557, 557, 558, 558, 558, 559, 560, 561, 562, 562, 563, 563, 564, 565, 566, 571, 572, 573, 573, 573, 575, 576, 577, 578, 578, 578, 581, 581, 582, 582, 585, 585, 586, 587, 587, 588, 588, 589, 590, 592, 593, 594, 595, 595, 597, 599, 599, 600, 600, 601, 603, 603, 607, 608, 609, 609, 611, 612, 615, 617, 620, 621, 623, 625, 626, 626, 627, 628, 629, 630, 631, 633, 633, 634, 635, 635, 636, 636, 636, 638, 640, 640, 641, 641, 641, 643, 644, 644, 647, 648, 648, 649, 650, 651, 652, 652, 653, 654, 654, 655, 656, 656, 658, 659, 660, 660, 661, 661, 662, 663, 665, 668, 668, 672, 674, 674, 675, 675, 678, 679, 680, 682, 683, 683, 683, 684, 685, 685, 686, 686, 687, 695, 699, 699, 700, 701, 702, 703, 705, 705, 706, 706, 706, 706, 706, 706, 707, 707, 708, 711, 711, 714, 714, 714, 714, 715, 716, 717, 720, 722, 724, 724, 726, 726, 727, 728, 728, 729, 731, 731, 731, 732, 733, 734, 735, 737, 738, 738, 739, 739, 741, 741, 743, 743, 746, 747, 747, 748, 749, 750, 751, 751, 753, 754, 754, 756, 756, 757, 758, 758, 759, 760, 760, 760, 762, 763, 763, 764, 764, 765, 765, 767, 768, 769, 769, 770, 772, 774, 774, 774, 774, 775, 775, 778, 778, 778, 778, 778, 779, 780, 780, 781, 781, 782, 782, 783, 783, 783, 783, 784, 784, 786, 789, 790, 791, 791, 792, 792, 793, 793, 794, 794, 797, 799, 799, 799, 799, 799, 800, 801, 802, 802, 803, 804, 809, 810, 810, 811, 812, 812, 812, 813, 814, 816, 817, 819, 819, 819, 820, 821, 821, 823, 823, 824, 825, 826, 826, 829, 830, 830, 831, 831, 832, 832, 834, 836, 836, 837, 838, 839, 840, 840, 843, 843, 844, 844, 846, 847, 850, 851, 852, 853, 854, 854, 855, 857, 857, 859, 860, 861, 861, 862, 863, 864, 865, 866, 869, 870, 871, 871, 871, 874, 874, 875, 875, 875, 877, 880, 880, 881, 881, 883, 883, 885, 887, 888, 888, 889, 890, 890, 891, 893, 895, 895, 896, 897, 899, 899, 900, 900, 900, 902, 902, 903, 904, 905, 906, 907, 908, 908, 909, 909, 910, 911, 911, 911, 913, 914, 914, 915, 916, 916, 920, 922, 923, 924, 924, 927, 927, 928, 928, 929, 930, 931, 933, 936, 937, 938, 941, 945, 945, 946, 947, 948, 948, 949, 949, 951, 954, 956, 956, 957, 959, 959, 961, 961, 966, 966, 966, 968, 969, 970, 970, 973, 973, 973, 973, 976, 979, 981, 982, 982, 983, 984, 986, 986, 988, 989, 989, 990, 991, 991, 991, 991, 991, 992, 993, 994, 998, 999];
const queries = [-10, -1, 0, 1, 2, 4, 5, 42, 500, 501, 502, 997, 998, 999, 1000, 1001, 2000];

describe("binary-search tests", () => {
  test("firstGteqIndex", () => {
    for (const query of queries) {
      const truth = firstGteqIndex_reference(mockSortedArray, query, v => v);
      const found = firstGteqIndex(mockSortedArray, query, v => v);
      expect(found).toEqual(truth);
    }
  });

  test("firstEqIndex", () => {
    for (const query of queries) {
      const truth = firstEqIndex_reference(mockSortedArray, query, v => v);
      const found = firstEqIndex(mockSortedArray, query, v => v);
      expect(found).toEqual(truth);
    }
  });

  test("firstGteqIndex with non-trivial key", () => {
    const descArray = Array.from(mockSortedArray).reverse();
    for (const query of queries) {
      const truth = firstGteqIndex_reference(descArray, query, v => -v);
      const found = firstGteqIndex(descArray, query, v => -v);
      expect(found).toEqual(truth);
    }
  });

  test("firstEqIndex with non-trivial key", () => {
    const descArray = Array.from(mockSortedArray).reverse();
    for (const query of queries) {
      const truth = firstEqIndex_reference(descArray, query, v => -v);
      const found = firstEqIndex(descArray, query, v => -v);
      expect(found).toEqual(truth);
    }
  });
});


function firstGteqIndex_reference<T>(sortedArray: T[], query: number, key: (element: T) => number): number {
  const found = sortedArray.findIndex(v => key(v) >= query);
  if (found >= 0) return found;
  else return sortedArray.length;
}

function firstEqIndex_reference<T>(sortedArray: T[], query: number, key: (element: T) => number): number | undefined {
  const found = sortedArray.findIndex(v => key(v) === query);
  if (found >= 0) return found;
  else return undefined;
}
